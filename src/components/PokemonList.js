import React, { useEffect, useState, useCallback } from 'react';
import PokemonCard from './PokemonCard';
import axios from 'axios';
import './PokemonList.css';

const PokemonList = () => {
  const [pokemon, setPokemon] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [offset, setOffset] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [hasMore, setHasMore] = useState(true);

  const loadMorePokemon = useCallback(() => {
    if (isLoading || !hasMore) return;
    setIsLoading(true);

    axios.get(`https://pokeapi.co/api/v2/pokemon?limit=20&offset=${offset}`)
      .then(response => {
        const newPokemon = response.data.results.map((pokemon, index) => ({
          name: pokemon.name,
          id: offset + index + 1,
          imageUrl: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${offset + index + 1}.png`
        }));

        setPokemon(prevPokemon => [...prevPokemon, ...newPokemon]);
        setOffset(prevOffset => prevOffset + 20);

        if (newPokemon.length < 20) {
          setHasMore(false);
        }
      })
      .catch(error => {
        console.error('Error fetching Pokémon:', error);
      })
      .finally(() => {
        setIsLoading(false);
      });
  }, [offset, isLoading, hasMore]);

  useEffect(() => {
    loadMorePokemon();
  }, [loadMorePokemon]);

  // Function to handle scrolling and trigger loading more Pokémon
  const handleScroll = useCallback(() => {
    if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight || isLoading) {
      return;
    }

    loadMorePokemon();
  }, [isLoading, loadMorePokemon]);

  useEffect(() => {
    window.addEventListener('scroll', handleScroll);

    return () => window.removeEventListener('scroll', handleScroll);
  }, [handleScroll]);

  const handleSearchChange = (event) => {
    setSearchQuery(event.target.value);
  };

  const filteredPokemon = pokemon.filter(poke =>
    poke.name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  return (
    <div>
      <h1 className="title">Pokémon List</h1>
      <p>Generated by Essoh</p>

      {/* Search Bar */}
      <div className="search_container">
        <input
          type="text"
          placeholder="Search Pokémon..."
          value={searchQuery}
          onChange={handleSearchChange}
          className="search-input"
        />
        {/* <FontAwesomeIcon icon={faSearch} className="search-icon" /> */}
      </div>

      <div className="pokemon-grid">
        {filteredPokemon.map((poke, index) => (
          <PokemonCard key={index} pokemon={poke} index={index} />
        ))}
      </div>

      {isLoading && <p>Loading more Pokémon...</p>}
      {!hasMore && <p>No more Pokémon to load.</p>}
    </div>
  );
};

export default PokemonList;
